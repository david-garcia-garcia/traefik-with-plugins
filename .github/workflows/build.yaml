name: Build and Push Docker Image to Docker Hub
on:
  push:
    branches:
      - master
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - master
      - main

permissions: { }

jobs:
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.build.outputs.imageid }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Load version variables
      run: |
        set -a
        source .env
        set +a
        echo "TRAEFIK_VERSION=${TRAEFIK_VERSION}" >> $GITHUB_ENV
        echo "PLUGIN_MODSECURITY_VERSION=${PLUGIN_MODSECURITY_VERSION}" >> $GITHUB_ENV
        echo "PLUGIN_REALIP_VERSION=${PLUGIN_REALIP_VERSION}" >> $GITHUB_ENV
        echo "PLUGIN_GEOBLOCK_VERSION=${PLUGIN_GEOBLOCK_VERSION}" >> $GITHUB_ENV
        echo "PLUGIN_CROWDSEC_VERSION=${PLUGIN_CROWDSEC_VERSION}" >> $GITHUB_ENV
        echo "PLUGIN_SABLIER_VERSION=${PLUGIN_SABLIER_VERSION}" >> $GITHUB_ENV
    - name: Build Docker image for testing
      id: build
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: ./traefik
        file: ./traefik/dockerfile
        load: true
        tags: traefik-with-plugins:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          TRAEFIK_VERSION=${{ env.TRAEFIK_VERSION }}
          PLUGIN_MODSECURITY_VERSION=${{ env.PLUGIN_MODSECURITY_VERSION }}
          PLUGIN_REALIP_VERSION=${{ env.PLUGIN_REALIP_VERSION }}
          PLUGIN_GEOBLOCK_VERSION=${{ env.PLUGIN_GEOBLOCK_VERSION }}
          PLUGIN_CROWDSEC_VERSION=${{ env.PLUGIN_CROWDSEC_VERSION }}
          PLUGIN_SABLIER_VERSION=${{ env.PLUGIN_SABLIER_VERSION }}
    - name: Install PowerShell and Pester
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-confnew packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        pwsh -c "Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck"
    - name: Setup Node.js for Cypress
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install Cypress and dependencies
      run: npm install
    - name: Start services
      run: docker compose up -d --build
    - name: Wait for services to be ready
      shell: pwsh
      run: |
        Write-Host "Waiting for Traefik API to be ready..."
        $timeout = 60
        $elapsed = 0
        do {
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/api/rawdata" -Method Get -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) { break }
          } catch { }
          Start-Sleep 2
          $elapsed += 2
        } while ($elapsed -lt $timeout)
        
        Write-Host "Waiting for whoami services to be ready..."
        $elapsed = 0
        do {
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:8000/plain" -Method Get -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) { break }
          } catch { }
          Start-Sleep 2
          $elapsed += 2
        } while ($elapsed -lt $timeout)
        
        Write-Host "Services are ready!"
    - name: Run Pester integration tests
      shell: pwsh
      run: |
        Import-Module Pester -Force
        Invoke-Pester -Path ./scripts/integration-tests.Tests.ps1 -Output Detailed
    - name: Run Cypress dashboard UI tests
      run: npm run test:dashboard
    - name: Upload Cypress screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        if-no-files-found: ignore
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Traefik logs ==="
        docker compose logs traefik
        echo "=== Plain Whoami logs ==="
        docker compose logs whoami-plain
        echo "=== ModSecurity Whoami logs ==="
        docker compose logs whoami-modsecurity
        echo "=== Geoblock Whoami logs ==="
        docker compose logs whoami-geoblock
        echo "=== CrowdSec Whoami logs ==="
        docker compose logs whoami-crowdsec
        echo "=== WAF logs ==="
        docker compose logs waf
        echo "=== CrowdSec logs ==="
        docker compose logs crowdsec
        echo "=== Dummy backend logs ==="
        docker compose logs dummy
    - name: Cleanup
      if: always()
      run: docker compose down -v
  push_to_registry:
    permissions:
      id-token: write
      attestations: write
    environment: DOCKERHUB_USERNAME
    name: push docker image to hub
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      REGISTRY: docker.io
      IMAGE_NAME: davidbcn86/traefik-with-plugins
    steps:
      - name: check repository
        uses: actions/checkout@v4

      - name: login to docker registry
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: davidbcn86/traefik-with-plugins
      
      - name: Load version variables
        run: |
          set -a
          source .env
          set +a
          echo "TRAEFIK_VERSION=${TRAEFIK_VERSION}" >> $GITHUB_ENV
          echo "PLUGIN_MODSECURITY_VERSION=${PLUGIN_MODSECURITY_VERSION}" >> $GITHUB_ENV
          echo "PLUGIN_REALIP_VERSION=${PLUGIN_REALIP_VERSION}" >> $GITHUB_ENV
          echo "PLUGIN_GEOBLOCK_VERSION=${PLUGIN_GEOBLOCK_VERSION}" >> $GITHUB_ENV
          echo "PLUGIN_CROWDSEC_VERSION=${PLUGIN_CROWDSEC_VERSION}" >> $GITHUB_ENV
          echo "PLUGIN_SABLIER_VERSION=${PLUGIN_SABLIER_VERSION}" >> $GITHUB_ENV
      
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./traefik
          file: ./traefik/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TRAEFIK_VERSION=${{ env.TRAEFIK_VERSION }}
            PLUGIN_MODSECURITY_VERSION=${{ env.PLUGIN_MODSECURITY_VERSION }}
            PLUGIN_REALIP_VERSION=${{ env.PLUGIN_REALIP_VERSION }}
            PLUGIN_GEOBLOCK_VERSION=${{ env.PLUGIN_GEOBLOCK_VERSION }}
            PLUGIN_CROWDSEC_VERSION=${{ env.PLUGIN_CROWDSEC_VERSION }}
            PLUGIN_SABLIER_VERSION=${{ env.PLUGIN_SABLIER_VERSION }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: push_to_registry
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Load versions and generate release notes
        id: release_notes
        run: |
          source .env
          chmod +x scripts/generate-release-notes.sh
          RELEASE_NOTES=$(./scripts/generate-release-notes.sh .env)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Set version info for release title
          echo "traefik_version=${TRAEFIK_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin_count=5" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Traefik ${{ steps.release_notes.outputs.traefik_version }} with ${{ steps.release_notes.outputs.plugin_count }} Embedded Plugins"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
          generate_release_notes: false